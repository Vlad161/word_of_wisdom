// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package http_test is a generated GoMock package.
package http_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPoW is a mock of PoW interface.
type MockPoW struct {
	ctrl     *gomock.Controller
	recorder *MockPoWMockRecorder
}

// MockPoWMockRecorder is the mock recorder for MockPoW.
type MockPoWMockRecorder struct {
	mock *MockPoW
}

// NewMockPoW creates a new mock instance.
func NewMockPoW(ctrl *gomock.Controller) *MockPoW {
	mock := &MockPoW{ctrl: ctrl}
	mock.recorder = &MockPoWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoW) EXPECT() *MockPoWMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockPoW) Calculate(ctx context.Context, payload []byte, timestamp int64, targetBits uint) (int, []byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", ctx, payload, timestamp, targetBits)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Calculate indicates an expected call of Calculate.
func (mr *MockPoWMockRecorder) Calculate(ctx, payload, timestamp, targetBits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockPoW)(nil).Calculate), ctx, payload, timestamp, targetBits)
}
