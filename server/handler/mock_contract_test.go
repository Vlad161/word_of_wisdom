// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package handler_test is a generated GoMock package.
package handler_test

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockHandler) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockHandlerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHandler)(nil).ServeHTTP), arg0, arg1)
}

// MockTokenStorage is a mock of TokenStorage interface.
type MockTokenStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStorageMockRecorder
}

// MockTokenStorageMockRecorder is the mock recorder for MockTokenStorage.
type MockTokenStorageMockRecorder struct {
	mock *MockTokenStorage
}

// NewMockTokenStorage creates a new mock instance.
func NewMockTokenStorage(ctrl *gomock.Controller) *MockTokenStorage {
	mock := &MockTokenStorage{ctrl: ctrl}
	mock.recorder = &MockTokenStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStorage) EXPECT() *MockTokenStorageMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockTokenStorage) Put(k string, v uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", k, v)
}

// Put indicates an expected call of Put.
func (mr *MockTokenStorageMockRecorder) Put(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTokenStorage)(nil).Put), k, v)
}

// TargetBits mocks base method.
func (m *MockTokenStorage) TargetBits(k string) (uint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetBits", k)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TargetBits indicates an expected call of TargetBits.
func (mr *MockTokenStorageMockRecorder) TargetBits(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetBits", reflect.TypeOf((*MockTokenStorage)(nil).TargetBits), k)
}

// Use mocks base method.
func (m *MockTokenStorage) Use(k string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", k)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockTokenStorageMockRecorder) Use(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockTokenStorage)(nil).Use), k)
}

// Verify mocks base method.
func (m *MockTokenStorage) Verify(k string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", k)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockTokenStorageMockRecorder) Verify(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTokenStorage)(nil).Verify), k)
}

// MockPoW is a mock of PoW interface.
type MockPoW struct {
	ctrl     *gomock.Controller
	recorder *MockPoWMockRecorder
}

// MockPoWMockRecorder is the mock recorder for MockPoW.
type MockPoWMockRecorder struct {
	mock *MockPoW
}

// NewMockPoW creates a new mock instance.
func NewMockPoW(ctrl *gomock.Controller) *MockPoW {
	mock := &MockPoW{ctrl: ctrl}
	mock.recorder = &MockPoWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoW) EXPECT() *MockPoWMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockPoW) Verify(payload []byte, timestamp int64, targetBits uint, nonce int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", payload, timestamp, targetBits, nonce)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPoWMockRecorder) Verify(payload, timestamp, targetBits, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPoW)(nil).Verify), payload, timestamp, targetBits, nonce)
}
